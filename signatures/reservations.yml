Reservation:
  ReservationInitiate:
    path: /reservation/create
    method: PUT
    title: Create Reservation
    description: Create Reservation instance, also record the creation time
    params:
      disease_id:
        type: Number
        description: Mandatory disease ID.
      hospital_id:
        type: UUID
        description: Mandatory hospital ID.
      patient_id:
        type: UUID
        description: Mandatory patient ID.
      timeslot_id:
        type: UUID
        description: Mandatory reservation slot ID.
      user_id:
        type: UUID
        description: Mandatory customer ID.
    returns: {}
    errors:
      RequiredFieldBlank:
        description: Any mandatory form is blank.
      ReservationExpired:
        description: The slots reserved expired after 30 min.
  ReservationUpdate:
    path: /reservation/:id/update
    method: POST
    title: Update Reservation Information
    description: Update reservation info fill in previous info
    params:
      first_diagnosed_doctor:
        type: optional<String>
        description: Optional diagnose-doctor.
      first_diagnosed_doctor_contact:
        type: optional<String>
        description: Optional diagnose-doctor contact info.
      first_diagnosed_hospital:
        type: optional<String>
        description: Optional diagnose-hospital.
      note:
        type: optional<String>
        description: Optional other notes.
      reservation_id:
        type: UUID
        description: Mandatory Reservation unique ID.
      timeslot_id:
        type: optional<UUID>
        description: Optional reservation slot ID.
    returns: {}
    errors:
      ReservationExpired:
        description: The slots reserved expired after 30 min.
  GetReservationInfo:
    path: /reservation/:id/info
    method: GET
    title: Reservation info
    description: Request reservation information.
    params: {}
    returns:
      reservation:
        type: Object
        description: Reservation Object
        fields:
          commit_at:
            type: DateTime
            description: Time of submission.
          ctime:
            type: DateTime
            description: Time of creation.
          disease_id:
            type: Number
            description: Unique ID for disease.
          first_doctor_contact:
            type: String
            description: Diagnose-doctor contact info.
          first_doctor_name:
            type: String
            description: Diagnose-doctor name.
          first_hospital:
            type: String
            description: Diagnose-hospital name.
          hospital_id:
            type: UUID
            description: Unique ID for hospital.
          note:
            type: String
            description: Note for the reservation.
          patient_id:
            type: UUID
            description: Unique ID for patient.
          res_id:
            type: UUID
            description: Reservation ID
          timeslot_id:
            type: UUID
            description: ID for reservation slot.
          user_id:
            type: UUID
            description: Unique ID for customer.
    errors:
      ReservationNotFound:
        description: The <code>id</code> of the required reservation doesn't exist.
  CommitReservation:
    path: /reservation/:id/commit
    method: POST
    title: Submit reservation information
    description: Store the created reservation in the database.
    params: {}
    returns: {}
    errors:
      ReservationExpired:
        description: The slots reserved expired after 30 min.
  PayReservation:
    path: /reserve/:id/pay
    method: POST
    title: Make payment
    description: Pay full payment or deposit for the reservation using third-part
      API
    params:
      type:
        type: Boolean
        description: Full payment or deposite.
      id:
        type: Number
        description: Unique ID of reservation.
      token:
        type: String
        description: Token generated by third-party API for payment processing.
    returns:
      id:
        type: Number
        description: Unique ID of Reservation.
    errors:
      PaymentFailed:
        description: The payment is not able to be processed.
Reservation/admin:
  Update Reservation:
    path: /reservation/admin/:res_id
    method: PUT
    title: Staff's operation to update a Reservation
    description: Update the info of a Reservation.
    params:
      res_id:
        type: UUID
        description: Reservation UUID
      translator_e2c_id:
        type: UUID
        description: New E2C_Translator id.
      translator_c2e_id:
        type: UUID
        description: New C2E_Translator id.
      status:
        type: Number
        description: New reservation status.
      trans_status:
        type: Number
        description: New translating status.
      token:
        type: String
        description: Token to verify authorization.
    returns:
      res_id:
        type: UUID
        description: Updated reservation UUID.
    errors:
      InvalidAuthorization:
        description: The operation is invalid at this stage.
      ReservationNotFound:
        description: The required <code>id</code> of reservation is not found.
  Delete Reservation:
    path: /reservation/admin/:res_id
    method: DELETE
    title: Supervisor's operation to delete a Reservation
    description: Remove a Reservation from Database.
    params:
      res_id:
        type: UUID
        description: Unique ID of a Reservation.
    returns:
      res_id:
        type: UUID
        description: Deleted reservation UUID.
    errors:
      InvalidAuthorization:
        description: This operation is invalid at this stage.
      ReservationNotFound:
        description: The required <code>id</code> of reservation is not found.
  ListReservations:
    path: /reservation/admin/:query
    method: GET
    title: Staff's operation to list reservations
    description: List all reservations.
    params:
      query:
        type: String
        description: Query to filter/sort reservation, e.g. /reservation/admin/?first_doctor_name=asd&ordering=-translator_id
    returns:
      reservations:
        type: Object[]
        description: list of reservation objects
        fields:
          res_id:
            type: UUID
            description: Reservation UUID
          translator_e2c_id:
            type: UUID
            description: New E2C_Translator id.
          translator_c2e_id:
            type: UUID
            description: New C2E_Translator id.
          status:
            type: Number
            description: New reservation status.
          trans_status:
            type: Number
            description: New translating status.
          token:
            type: String
            description: Token to verify authorization.
    returns:
      res_id:
        type: UUID
        description: Updated reservation UUID.
