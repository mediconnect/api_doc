Questionnaire:
  QuestionnaireInfo:
    path: /questionnaire/admin/:id
    method: GET
    title: Request Questionnaire
    description: Request questionnaire information.
    params:
      id:
        type: UUID
        description: Questionnaire UUID
    returns:
      questionnaire:
        type: Object
        description: Questionnaire Object
        fields:
          id:
            type: UUID
            description: Questionnaire UUID.
          translator_id:
            type: UUID
            description: Translator assigned to this questionnaire UUID.
          category:
            type: String
            description: Category of this questionnaire
          hospital_id:
            type: UUID
            description: Hospital of this questionnaire UUID
          disease_id:
            type: UUID
            description: Disease of this questionnaire UUID
          is_translated:
            type: Boolean
            description: Whther the questionnaire has been translated.
          translated:
            type: File
            description: Translated pdf file of questionnaire
          origin:
            type: File
            description: Untranslated pdf file of questionnaire
    errors:
      QuestionnaireNotFound:
        description: The requested <code>id</code> of questionnaire is not found.
  RequestQuetionnaire:
    path: /questionnaire/:token
    method: GET
    title: Request a questionnaire based on token
    description: Request questionnaire based on signature token.
    params:
      token:
        type: String
        description: Token to be unsigned and get questionnaire_id
    retuen:
      id:
        type: UUID
        description: Questionnaire UUID.
  CreateQuestionnaire:
    path: /questionnaire/admin
    method: POST
    title: Create Questionnaire
    description: Create a Questionnaire.
    params:
      translator_id:
        type: UUID
        description: Translator assigned to this questionnaire UUID.
      category:
          type: String
          description: Category of this questionnaire
      hospital_id:
        type: UUID
        description: Hospital of this questionnaire UUID
      disease_id:
        type: UUID
        description: Disease of this questionnaire UUID
      is_translated:
        type: Boolean
        description: Whther the questionnaire has been translated.
      translated:
        type: File
        description: Translated pdf file of questionnaire
      origin:
        type: File
        description: Untranslated pdf file of questionnaire
    returns:
      id:
        type: UUID
        description: Questionnaire ID.
    errors:
      QuestionnaireNotFound:
        description: The requested <code>id</code> of questionnaire is not found.
      TranslatorNotFound:
        description: The requested <code>id</code> of translator is not found.
  UpdateQuestionnaire:
    path: /questionnaire/admin/:id
    method: PUT
    title: Update Questionnaire
    description: Update a Questionnaire.
    params:
      translator_id:
        type: UUID
        description: Translator assigned to this questionnaire UUID.
      category:
          type: String
          description: Category of this questionnaire
      hospital_id:
        type: UUID
        description: Hospital of this questionnaire UUID
      disease_id:
        type: UUID
        description: Disease of this questionnaire UUID
      translated:
        type: Boolean
        description: Whther the questionnaire has been translated.
      # token:
      #   type: String
      #   description: Token to authorize operation.
    returns:
      id:
        type: UUID
        description: Updated questionnaire ID.
    errors:
      InvalidAuthorization:
        description: This operation is invalid at this stage.
      QuestionnaireNotFound:
        description: The requested <code>id</code> of questionnaire is not found.
      TranslatorNotFound:
        description: The requested <code>id</code> of translator is not found.
  ListQuestionnarie:
    path: /questionnaire/admin/:query
    method: GET
    title: Request list of Questionnaires
    description: Request a list of questionnaires based on query.
    params:
      query:
        type: String
        description: Query to filter/sort the questionnaires.
    returns:
      questionnaires:
        type: Object[]
        description: List of filterd/sorted questionnaires.
    errors: {}
  DeleteQuestionnarie:
    path: /questionnaire/admin/:id
    method: DELETE
    title: Delete Questionnaires
    description: Delete a questionnaire.
    params:
      id:
        type: UUID
        description: UUID of questionnaire to be deleted.
      # token:
      #   type: String
      #   description: Token to authorize the operation.
    returns:
      id:
        type: UUID
        description: UUID of deleted questionnaire.
    errors:
      InvalidAuthorization:
        description: This operation is invalid at this stage.
      QuestionnaireNotFound:
        description: The required <code>id</code> of questionnaire is not found.
Question:
  ListAllQuestions:
    path: questionnaire/questions/:query
    method: GET
    params:
      query:
        type: String
        description: Query to filter/sort questions
  QuestionInfo:
    path: questionnaire/admin/:questionnaire_id/question/:question_id
    method: GET
    title: Question Info
    description: Request information about a quesiton
    params:
      questionnaire_id:
        type: UUID
        description: UUID of questionnaire
      question_id:
        type: UUID
        description: UUID of question
    returns:
      question:
        type: Object
        description: A question object
        fields:
          content:
            type: String
            description: Question content
          format:
            type: Number
            description: Quesiton format code.
    errors:
      QuestionnaireNotFound:
        description: The required <code>id</code> of questionnaire is not found.
      QuestionNotFound:
        description: The required <code>id</code> of question is not found.
  CreateQuestion:
    path: questionnaire/admin/:questionnaire_id/question
    method: POST
    title: Create Question
    description: Create a question
    params:
      content:
        type: String
        description: Question content
      formaat:
        type: Number
        description: Quesiton format code.
      # token:
      #   type: String
      #   description: Toekn to authorize operation.
    returns:
      id:
        type: UUID
        description: UUID of created question
    errors:
      InvalidAuthorization:
        description: This operation is invalid at this stage.
      QuestionNotFound:
        description: The required <code>id</code> of question is not found.
  UpdateQuestion:
    path: questionnaire/admin/:questionnaire_id/question/:question_id
    method: PUT
    title: Update Question
    description: Update a Question.
    params:
      questinnaire_id:
        type: UUID
        description: Questionnaire UUID
      question_id:
        type: UUID
        description: Question UUID
      content:
        type: String
        description: Question content
      formaat:
        type: Number
        description: Quesiton format code.
      # token:
      #   type: String
      #   description: Token to authorize operation.
    returns:
      id:
        type: UUID
        description: Updated question ID.
    errors:
      InvalidAuthorization:
        description: This operation is invalid at this stage.
      QuestioneNotFound:
        description: The requested <code>id</code> of question is not found.
      ChoiceNotFound:
        description: The requested <code>id</code> of choice is not found.
  ListQuestion:
    path: questionnaire/admin/:questionnaire_id/question/:query
    method: GET
    title: Request list of Quesiton of questionnaire
    description: Request a list of questions of a questionnaire.
    params:
      questionnaire_id:
        type: String
        description: Questionnaire UUID
      query:
        type: String
        description: Query to filter/sort the question.
    returns:
      questions:
        type: Object[]
        description: List of filterd/sorted question.
    errors: {}
  DeleteQuestion:
    path: questionnaire/admin/:questionnaire_id/question/:question_id
    method: DELETE
    title: Delete Question
    description: Delete a question.
    params:
      id:
        type: UUID
        description: UUID of question to be deleted.
      token:
        type: String
        description: Token to authorize the operation.
    returns:
      id:
        type: UUID
        description: UUID of deleted question.
    errors:
      InvalidAuthorization:
        description: This operation is invalid at this stage.
      QuestionNotFound:
        description: The required <code>id</code> of question is not found.
Choice:
  ListAllChoices:
    path: questionnaire/choices/:query
    method: GET
    params:
      query:
        type: String
        description: Query to filter/sort choices
  ChoiceInfo:
    path: questionnaire/admin/:questionnaire_id/question/:question_id/choice/:choice_id
    method: GET
    title: Choice Info
    description: Request information about a choice
    params:
      questionnaire_id:
        type: UUID
        description: UUID of questionnaire
      question_id:
        type: UUID
        description: UUID of question
      choice_id:
        type: UUID
        description: UUID of choice
    returns:
      choice:
        type: Object
        description: A choice object
        fields:
          content:
            type: String
            description: Question content
    errors:
      QuestionnaireNotFound:
        description: The required <code>id</code> of questionnaire is not found.
      QuestionNotFound:
        description: The required <code>id</code> of question is not found.
  CreateChoice:
    path: questionnaire/admin/:questionnaire_id/question/:question_id/choice
    method: POST
    title: Create Choice
    description: Create a choice
    params:
      question_id:
        type: UUID[]
        description: List of UUIDs of question this choice belongs to.
      content:
        type: String[]
        description: List of choice contents.
    returns:
      id:
        type: UUID[]
        description: List of UUIDs of created choice
    errors:
      QuestionNotFound:
        description: The required <code>id</code> of question is not found.
  UpdateChoice:
    path: questionnaire/admin/:questionnaire_id/question/:question_id/choice/:choice_id
    method: PUT
    title: Update Choice
    description: Update a choice.
    params:
      content:
        type: String
        description: Choice content
      token:
        type: String
        description: Token to authorize operation.
    returns:
      id:
        type: UUID
        description: Updated choice ID.
    errors:
      InvalidAuthorization:
        description: This operation is invalid at this stage.
      ChoiceNotFound:
        description: The requested <code>id</code> of choice is not found.
  ListChoice:
    path: questionnaire/admin/:questionnaire_id/question/:question_id/choice
    method: GET
    title: Request list of Choices
    description: Request a list of choices of a question of a questionnaire
    params:
      questionnaire_id:
        type: UUID
        description: UUID of a questionnaire
      question_id:
        type: UUID
        description: UUID  of a question
      query:
        type: String
        description: Query to filter/sort the choice.
    returns:
      choices:
        type: Object[]
        description: List of filterd/sorted choices.
    errors: {}
  DeleteChoice:
    path: questionnaire/admin/:questionnaire_id/question/:question_id/choice/:choice_id
    method: DELETE
    title: Delete Choice
    description: Delete a choice.
    params:
      id:
        type: UUID
        description: UUID of choice to be deleted.
      token:
        type: String
        description: Token to authorize the operation.
    returns:
      id:
        type: UUID
        description: UUID of deleted choice.
    errors:
      InvalidAuthorization:
        description: This operation is invalid at this stage.
      ChoiceNotFound:
        description: The required <code>id</code> of choice is not found.
Anser:
  ListAllAnswers:
    path: questionnaire/answer/:query
    method: GET
    params:
      query:
        type: String
        description: Query to filter/sort answers
  AnswerInfo:
    path: questionnaire/reservation/:res_id/answer/:answer_id
    method: GET
    title: Answer Info
    description: Request information about an Answer of an reservation
    params:
      answer_id:
        type: UUID
        description: UUID of an answer
      res_id:
        type: UUID
        description: UUID of reservation
    returns:
      answer:
        type: Object
        description: An answer object
        fields:
          res_id:
            type: UUID
            description: Reservation UUID
          questionnaire_id:
            type: UUID
            description: Questionnaire UUID
          content:
            type: String[]
            description: List of Answer contents
          origin:
            type: File
            description: Un-translated answer pdf file.
          translated:
            type: File
            description: Translated answer pdf file
          is_translated:
            type: boolean
            description: Whther the answer pdf file is translated
          translator_id:
            type: UUID
            description: C2E translator assigned to this answer.
    errors:
      QuestionnaireNotFound:
        description: The required <code>id</code> of questionnaire is not found.
      QuestionNotFound:
        description: The required <code>id</code> of question is not found.
  CreateAnswer:
    path: questionnaire/reservation/:res_id/answer/:answer_id
    method: POST
    title: Create Answer
    description: Create an Answer
    params:
      res_id:
        type: UUID
        description: Reservation UUID
      questionnaire_id:
        type: UUID
        description: Questionnaire UUID
      content:
        type: String[]
        description: List of Answer contents
      origin:
        type: File
        description: Un-translated answer pdf file.
    returns:
      id:
        type: UUID
        description: UUID of answeranswer
    errors:
      QuestionnaireNotFound:
        description: The required <code>id</code> of questionnaire is not found.
      QuestionNotFound:
        description: The required <code>id</code> of question is not found.
      TranslatorNotFound:
        description: The requested <code>id</code> of translator is not found.
  UpdateAnswer:
    path: questionnaire/reservation/:res_id/answer/:answer_id
    method: PUT
    title: Update Answer
    description: Update an Answer
    params:
      choice_id:
        type: UUID
        description: Choice UUID
      res_id:
        type: UUID
        description: Reservation UUID
      questionnaire_id:
        type: UUID
        description: Questionnaire UUID
      content:
        type: String[]
        description: List of Answer contents
      origin:
        type: File
        description: Un-translated answer pdf file.
      translated:
        type: File
        description: Translated answer pdf file
      is_translated:
        type: boolean
        description: Whther the answer pdf file is translated
      translator_id:
        type: UUID
        description: C2E translator assigned to this answer.
      token:
        type: String
        description: Token to authorize operation.
    returns:
      id:
        type: UUID
        description: UUID of answeranswer
    errors:
      QuestionnaireNotFound:
        description: The required <code>id</code> of questionnaire is not found.
      QuestionNotFound:
        description: The required <code>id</code> of question is not found.
      AnswerNotFound:
        description: The required <code>id</code> of answer is not found.
      TranslatorNotFound:
        description: The requested <code>id</code> of translator is not found.
      InvalidAuthorization:
        description: This operation is invalid at this stage.
  DeleteAnswer:
    path: questionnaire/reservation/:res_id/answer/:answer_id
    method: DELETE
    title: Delete Answer
    description: Delete an Answer
    params:
      res_id:
        type: UUID
        description: UUID of a reservation
      id:
        type: UUID
        description: UUID of an answer
      # token:
      #   type: String
      #   description: Token to authorize operation
    returns:
      id:
        type: UUID
        description: UUID of deleted answer
    errors:
      AnswerNotFound:
        description: The required <code>id</code> of answer is not found.
      InvalidAuthorization:
        description: This operation is invalid at this stage.
  ListAnswer:
    path: questionnaire/reservation/:res_id/answer/:query
    method: GET
    title: Request list of Answers
    description: Request a list of answers based on query.
    params:
      res_id:
        type: UUID
        description: UUID of a reservation
      query:
        type: String
        description: Query to filter/sort the answer.
    returns:
      choices:
        type: Object[]
        description: List of filterd/sorted answers.
    errors: {}

