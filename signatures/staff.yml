Staff:
  StaffLogin:
    path: /staff/login/
    method: POST
    title: Staff Login
    description: Handle staff login request.
    params:
      email:
        type: String
        description: Mandatory email address.
      password:
        type: String
        description: Mandatory password.
    returns: 
      user_id:
        type: UUID
        description: UUID of authorized staff user.
      staff_id:
        type: UUID
        description: UUID of authorized staff
      role:
        type: String
        description: Role of  authorized staff
      msg:
        type: String
        description: I don't know what it is nor why we are returning it
    errors: {}
  StaffLogout:
    path: /staff/logout
    method: POST
    title: Staff Logout
    description: Handle staff logout request
    params: {}
    returns: 
      msg:
        type: String
        description: message (in the future a redirect_to will be implemented)
    errors: {}
  StaffSummary:
    path: staff/:staff_id/summary
    method: GET
    title: Summarize Website Stats
    description: Request a summary of the staff's stats.
    params: 
      staff_id:
        type: UUID
        description: Staff user UUID
    returns:
      num_reservation_done:
        type: Number
        description: Number of done reservations.
      num_reservation_translating:
        type: Number
        description: Number of trasnlating reservations.
      num_reservation_approving:
        type: Number
        description: Number of approving reservations.
      num_reservation:
        type: Number
        description: Total number of reservations.
    errors: {}
  StaffAssignment:
    path: staff/:staff_id/assignment
    method: GET
    title: Staff Assignmnt
    description: Request a list of staff's assignments (reservations).
    params: 
      staff_id:
        type: UUID
        description: Staff UUID
      query:
        type: String
        description: A qeury to filter/sort assignments.
    returns:
      reservations:
        type: Object[]
        description: List of reservation objects
        fields:
          disease_id:
            type: Number
            description: Unique ID for disease.
          res_id:
            type: UUID
            description: Reservation ID
          timeslot_id:
            type: UUID
            description: ID for reservation slot.
          user_id:
            type: UUID
            description: Unique ID for customer.
          patient_id:
            type: UUID
            description: Unique ID for patient.
          hospital_id:
            type: UUID
            description: Unique ID for hospital.
    errors: {}
  CreateUser:
    path: /staff/user
    method: POST
    title: Create a User
    description: Create a user.
    params:
      email:
        type: String
        description: Mandatory email address.
      first_name:
        type: String
        description: Mandatory first name.
      last_name:
        type: String
        description: Mandatory last name.
      password:
        type: String
        description: Mandatory password.
      confirmed_password:
        type: String
        description: Mandatory confirmation password.
      tel:
        type: Optional<String>
        description: Optional phone number.
      address:
        type: Optional<String>
        description: Optional address
      role:
        type: Optional<Number>
        description: 0 for customer, 1 for c2e trans, 2 for e2c trans, 3 for sup, default 0
    returns:
      user:
        type: Object
        description: User Object.
        fields:
          id:
            type: UUID
            description: Created user id.
          username:
            type: String
            description: 
          first_name:
            type: String
            description: 
          last_name:
            type: String
            description: 
          email:
            type: String
            description: 
          is_active:
            type: Boolean
            description: Whether this user has been verified and is active
          is_staff:
            type: Boolean
            description: Whether this user is a is staff
          is_superuser:
            type: Boolean
            description: Whether this user is a superuser
          date_joined:
            type: Datetime
            description: 
          last_login:
            type: Datetime
            description: 
          groups:
            type: String[]
            description: Groups that this user belongs to
          user_permissions:
            type: String[]
            description: Permissions that this user has
    errors:
      EmailAlreadyExists:
        description: The email exists in the DB.
      PasswordDoesNotMath:
        description: The password does not match password_confirmation.
      RequiredFieldBlank:
        description: Any mandatory form is blank.
  ListUser:
    path: /staff/user/:query
    method: GET
    title: Request list of User
    description: Request a list of users based on query.
    params:
      query:
        type: String
        description: Query to filter/sort the users.
    returns:
      users:
        type: Object[]
        description: List of filterd/sorted users.
    errors: {}
  UserInfo:
    path: /staff/user/:id
    method: GET
    title: Request User Info
    description: Request user info.
    params:
      id:
        type: UUID
        description: Mandatory unique User ID.
    returns:
      user:
        type: Object
        description: User Object.
    errors:
      UserNotFound:
        description: The <code>id</code> of the user was not found.
  UpdateUser:
    path: /staff/user/
    method: POST
    title: Update User Info
    description: Update user info.
    params:
      address:
        type: optional<String>
        description: Optional User address.
      age:
        type: Number
        description: Optional] Optional User age.
      email:
        type: optional<String>
        description: Optional User email.
      first_name:
        type: optional<String>
        description: Optional User first name.
      gender:
        type: optional<String>
        description: Optional User gender.
      id:
        type: UUID
        description: Mandatory unique User ID.
      last_name:
        type: optional<String>
        description: Optional User last name.
      phone:
        type: optional<String>
        description: Optional User phone.
      qq:
        type: optional<String>
        description: Optional User qq.
      token:
        type: String
        description: Mandatory token for authorizing operation.
      wechat:
        type: optional<String>
        description: Optional User wechat.
    returns: 
      msg:
        type: String
        description: I don't know what it is nor why we are returning it
    errors:
      AuthorizationFailed:
        description: The operation is not authorized.
      UserNotFound:
        description: The <code>id</code> of the user was not found.
  DeleteUser:
    path: /staff/user/:id
    method: DELETE
    title: Delete User
    description: Delete user.
    params:
      id:
        type: Number
        description: Mandatory unique User ID.
      token:
        type: String
        description: Mandatory token for authorizing operation.
    returns: 
      msg:
        type: String
        description: I don't know what it is nor why we are returning it
    errors:
      UserNotFound:
        description: The <code>id</code> of the user was not found.
